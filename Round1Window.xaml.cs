using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Imaging;

namespace HayChonGiaDung.Wpf
{
    public partial class Round1Window : Window
    {
        private int questionIndex = 0;
        private int correct = 0;
        private Product current = null!;
        private int qty = 1;
        private int hiddenPrice = 0;
        private int correctPrice = 0;
        public Round1Window()
        {
            InitializeComponent();
            this.WindowState = WindowState.Maximized;
            SoundManager.StartRound();
            NextQuestion();
        }

        private void NextQuestion()
        {
            questionIndex++;
            if (questionIndex > 10) { OpenPunchBoard(); return; }
            RoundProgText.Text = $"C√¢u {questionIndex}/10";

            // pick product
            current = GameState.Catalog.Count > 0
                ? GameState.Catalog[GameState.Rnd.Next(GameState.Catalog.Count)]
                : new Product { Name = "S·∫£n ph·∫©m", Price = 1_000_000 };

            qty = GameState.Rnd.Next(1, 5);
            correctPrice = current.Price * qty;

            // hidden price around correct ¬±20%
            var delta = (int)(correctPrice * 0.2);
            hiddenPrice = Math.Max(1000, correctPrice + GameState.Rnd.Next(-delta, delta + 1));

            // UI text
            ProductName.Text = current.Name;
            QuantityText.Text = $"S·ªë l∆∞·ª£ng: {qty} chi·∫øc";
            Question.Text = $"{hiddenPrice:N0} ‚Ç´ ‚Äî Gi√° ƒë√∫ng CAO H∆†N hay TH·∫§P H∆†N?";

            // description (n·∫øu c√≥), fallback c√¢u m·∫∑c ƒë·ªãnh
            ProductDesc.Text = GetDescriptionOrDefault(current);

            // image
            ProductImage.Source = null;
            if (!string.IsNullOrWhiteSpace(current.ImageUrl) &&
                Uri.IsWellFormedUriString(current.ImageUrl, UriKind.Absolute))
            {
                ProductImage.Source = new BitmapImage(new Uri(current.ImageUrl));
            }
            else if (!string.IsNullOrWhiteSpace(current.Image))
            {
                string path = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets", "Images", current.Image);
                if (System.IO.File.Exists(path))
                    ProductImage.Source = new BitmapImage(new Uri(path));
            }

            // m√¥ t·∫£
            ProductDesc.Text = string.IsNullOrWhiteSpace(current.Description)
                ? "Ch∆∞a c√≥ m√¥ t·∫£ cho s·∫£n ph·∫©m n√†y."
                : current.Description;

            Feedback.Text = "";
            CorrectCount.Text = $"{correct}/10";
        }

        // L·∫•y m√¥ t·∫£ n·∫øu Product c√≥ property "Description" (nullable) ho·∫∑c tr·∫£ v·ªÅ fallback
        private static string GetDescriptionOrDefault(Product p)
        {
            try
            {
                var prop = p.GetType().GetProperty("Description"); // h·ªó tr·ª£ n·∫øu anh th√™m v√†o model sau n√†y
                var val = prop?.GetValue(p) as string;
                if (!string.IsNullOrWhiteSpace(val)) return val!;
            }
            catch { /* ignore */ }
            return "Ch∆∞a c√≥ m√¥ t·∫£ cho s·∫£n ph·∫©m n√†y.";
        }

        private async Task EvaluateAsync(bool guessHigher)
        {
            HigherButton.IsEnabled = false;
            LowerButton.IsEnabled = false;

            bool isHigher = correctPrice > hiddenPrice;
            if (guessHigher == isHigher)
            {
                correct++;
                Feedback.Text = $"‚úÖ Chu·∫©n! Gi√° ƒë√∫ng: {correctPrice:N0} ‚Ç´";
                SoundManager.Correct();
            }
            else
            {
                Feedback.Text = $"‚ùå Sai! Gi√° ƒë√∫ng: {correctPrice:N0} ‚Ç´";
                SoundManager.Wrong();
            }
            CorrectCount.Text = $"{correct}/10";

            await Task.Delay(1000);

            Feedback.Text = string.Empty;
            HigherButton.IsEnabled = true;
            LowerButton.IsEnabled = true;

            NextQuestion();
        }

        private async void Higher_Click(object sender, RoutedEventArgs e) => await EvaluateAsync(true);
        private async void Lower_Click(object sender, RoutedEventArgs e) => await EvaluateAsync(false);

        private void Swap_Click(object sender, RoutedEventArgs e)
        {
            if (!GameState.UseHelpCard(HelpCardType.SwapProduct))
            {
                MessageBox.Show("B·∫°n kh√¥ng ƒë·ªß th·∫ª ƒë·ªïi s·∫£n ph·∫©m.", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            Feedback.Text = "üîÑ ƒê√£ ƒë·ªïi sang s·∫£n ph·∫©m kh√°c.";
            questionIndex--;
            NextQuestion();
        }

        private void Finish_Click(object sender, RoutedEventArgs e) => OpenPunchBoard();

        private async void OpenPunchBoard()
        {
            bool win = correct > 0;
            if (win)
            {
                await RoundCelebrationHelper.ShowWinAsync(this,
                    $"B·∫°n ƒë√£ ho√†n th√†nh v√≤ng 1 v·ªõi {correct}/10 c√¢u ƒë√∫ng!\nB·∫°n nh·∫≠n ƒë∆∞·ª£c {correct} l∆∞·ª£t ƒë·ª•c b·∫£ng.");
            }
            else
            {
                RoundCelebrationHelper.ShowLose(this,
                    "B·∫°n ch∆∞a tr·∫£ l·ªùi ƒë√∫ng c√¢u n√†o ·ªü v√≤ng 1. H√£y th·ª≠ v·∫≠n may l·∫ßn sau!");
            }

            var pb = new PunchBoardWindow(correct) { Owner = this };
            pb.ShowDialog();
            DialogResult = true;
            Close();
        }
    }
}
