using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;

namespace HayChonGiaDung.Wpf
{
    public partial class Round1Window : Window
    {
        private const int TotalQuestions = 6;
        private int questionIndex = 0;
        private int correct = 0;
        private Product current = null!;
        private int qty = 1;
        private int correctPrice = 0;
        private int referencePrice = 0;
        private bool hintUsedThisQuestion;

        public Round1Window()
        {
            InitializeComponent();
            this.WindowState = WindowState.Maximized;
            SoundManager.StartRound();
            NextQuestion();
        }

        private void NextQuestion(bool advance = true)
        {
            if (advance)
            {
                questionIndex++;
            }

            if (questionIndex > TotalQuestions)
            {
                OpenPunchBoard();
                return;
            }

            RoundProgText.Text = $"C√¢u {questionIndex}/{TotalQuestions}";

            hintUsedThisQuestion = false;
            RangeHint.Text = string.Empty;
            Feedback.Text = string.Empty;
            LowerButton.IsEnabled = true;
            HigherButton.IsEnabled = true;

            // pick product
            current = GameState.Catalog.Count > 0
                ? GameState.Catalog[GameState.Rnd.Next(GameState.Catalog.Count)]
                : new Product { Name = "S·∫£n ph·∫©m", Price = 1_000_000 };

            qty = GameState.Rnd.Next(1, 5);
            correctPrice = current.Price * qty;
            referencePrice = GenerateReferencePrice(correctPrice);

            // UI text
            ProductName.Text = $"{current.Name} x{qty}";
            Question.Text = "Theo b·∫°n gi√° b√°n th·∫≠t ƒëang cao h∆°n hay th·∫•p h∆°n m·ªëc g·ª£i √Ω?";
            ReferencePriceText.Text = $"{referencePrice:N0} ‚Ç´";

            // description (n·∫øu c√≥), fallback c√¢u m·∫∑c ƒë·ªãnh
            ProductDesc.Text = GetDescriptionOrDefault(current);

            // image
            ProductImage.Source = null;
            if (!string.IsNullOrWhiteSpace(current.ImageUrl) &&
                Uri.IsWellFormedUriString(current.ImageUrl, UriKind.Absolute))
            {
                ProductImage.Source = new BitmapImage(new Uri(current.ImageUrl));
            }
            else if (!string.IsNullOrWhiteSpace(current.Image))
            {
                string path = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets", "Images", current.Image);
                if (System.IO.File.Exists(path))
                    ProductImage.Source = new BitmapImage(new Uri(path));
            }

            // m√¥ t·∫£
            ProductDesc.Text = string.IsNullOrWhiteSpace(current.Description)
                ? "Ch∆∞a c√≥ m√¥ t·∫£ cho s·∫£n ph·∫©m n√†y."
                : current.Description;

            AnimateProduct();
            RefreshHud();
        }

        // L·∫•y m√¥ t·∫£ n·∫øu Product c√≥ property "Description" (nullable) ho·∫∑c tr·∫£ v·ªÅ fallback
        private static string GetDescriptionOrDefault(Product p)
        {
            try
            {
                var prop = p.GetType().GetProperty("Description"); // h·ªó tr·ª£ n·∫øu anh th√™m v√†o model sau n√†y
                var val = prop?.GetValue(p) as string;
                if (!string.IsNullOrWhiteSpace(val)) return val!;
            }
            catch { /* ignore */ }
            return "Ch∆∞a c√≥ m√¥ t·∫£ cho s·∫£n ph·∫©m n√†y.";
        }

        private async Task EvaluateAsync(bool guessHigher)
        {
            HigherButton.IsEnabled = false;
            LowerButton.IsEnabled = false;

            var actualHigher = correctPrice > referencePrice;
            if (actualHigher == guessHigher)
            {
                correct++;
                var diff = Math.Abs(correctPrice - referencePrice);
                Feedback.Text = $"‚úÖ Ch√≠nh x√°c! Gi√° th·∫≠t {correctPrice:N0} ‚Ç´ {(actualHigher ? "cao h∆°n" : "th·∫•p h∆°n")} m·ªëc {referencePrice:N0} ‚Ç´ kho·∫£ng {diff:N0} ‚Ç´.";
                SoundManager.Correct();
            }
            else
            {
                Feedback.Text = $"‚ùå Ch∆∞a ƒë√∫ng. Gi√° th·∫≠t l√† {correctPrice:N0} ‚Ç´ {(actualHigher ? "cao h∆°n" : "th·∫•p h∆°n")} m·ªëc g·ª£i √Ω.";
                SoundManager.Wrong();
            }
            RefreshHud();

            await Task.Delay(1200);
            Feedback.Text = string.Empty;
            NextQuestion();
        }

        private async void HigherButton_Click(object sender, RoutedEventArgs e) => await EvaluateAsync(true);

        private async void LowerButton_Click(object sender, RoutedEventArgs e) => await EvaluateAsync(false);

        private void HintButton_Click(object sender, RoutedEventArgs e)
        {
            if (hintUsedThisQuestion)
            {
                Feedback.Text = "B·∫°n ƒë√£ d√πng g·ª£i √Ω cho c√¢u n√†y.";
                return;
            }

            if (!EnsureCardAvailable(PowerCardType.Hint, 5, "G·ª£i √Ω"))
                return;

            hintUsedThisQuestion = true;
            var difference = Math.Abs(correctPrice - referencePrice);
            var percent = difference / (double)referencePrice;
            RangeHint.Text = $"üëâ Gi√° th·∫≠t ch√™nh kho·∫£ng {difference:N0} ‚Ç´ (~{percent:P0}) so v·ªõi m·ªëc g·ª£i √Ω.";
            Feedback.Text = "ƒê√£ k√≠ch ho·∫°t th·∫ª g·ª£i √Ω!";
            RefreshHud();
        }

        private void SwapButton_Click(object sender, RoutedEventArgs e)
        {
            if (!EnsureCardAvailable(PowerCardType.SwapProduct, 8, "ƒê·ªïi s·∫£n ph·∫©m"))
                return;

            NextQuestion(advance: false);
            Feedback.Text = "ƒê√£ ƒë·ªïi sang s·∫£n ph·∫©m m·ªõi.";
            RefreshHud();
        }

        private void DoubleButton_Click(object sender, RoutedEventArgs e)
        {
            if (!EnsureCardAvailable(PowerCardType.DoubleReward, 10, "Nh√¢n ƒë√¥i"))
                return;

            GameState.QueueDoubleReward();
            Feedback.Text = "‚≠ê Ph·∫ßn th∆∞·ªüng k·∫ø ti·∫øp s·∫Ω ƒë∆∞·ª£c nh√¢n ƒë√¥i!";
            RefreshHud();
        }

        private void Finish_Click(object sender, RoutedEventArgs e) => OpenPunchBoard();

        private void OpenPunchBoard()
        {
            var pb = new PunchBoardWindow(correct) { Owner = this };
            pb.ShowDialog();
            DialogResult = true;
            Close();
        }

        private void RefreshHud()
        {
            CorrectCount.Text = $"{correct}/{TotalQuestions}";
            CoinText.Text = GameState.Coins.ToString();
            CardText.Text = $"G·ª£i √Ω {GameState.GetCardCount(PowerCardType.Hint)} ‚Ä¢ ƒê·ªïi {GameState.GetCardCount(PowerCardType.SwapProduct)} ‚Ä¢ x2 {GameState.GetCardCount(PowerCardType.DoubleReward)}";
        }

        private bool EnsureCardAvailable(PowerCardType type, int coinCost, string cardLabel)
        {
            if (GameState.TryUsePowerCard(type))
            {
                return true;
            }

            if (GameState.Coins < coinCost)
            {
                MessageBox.Show("B·∫°n kh√¥ng c√≤n th·∫ª v√† c≈©ng kh√¥ng ƒë·ªß xu ƒë·ªÉ mua th√™m.", cardLabel, MessageBoxButton.OK, MessageBoxImage.Information);
                return false;
            }

            var confirm = MessageBox.Show($"Mua th·∫ª {cardLabel} v·ªõi {coinCost} xu?", "Mua th·∫ª", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (confirm != MessageBoxResult.Yes)
            {
                return false;
            }

            if (!GameState.TrySpendCoins(coinCost))
            {
                MessageBox.Show("Xu hi·ªán c√≥ kh√¥ng ƒë·ªß.", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
                return false;
            }

            GameState.AddPowerCard(type);
            GameState.TryUsePowerCard(type);
            return true;
        }

        private static int GenerateReferencePrice(int actualPrice)
        {
            if (actualPrice <= 0)
            {
                return 100_000;
            }

            var percent = GameState.Rnd.Next(12, 28) / 100.0; // 12% - 27%
            var pushHigher = GameState.Rnd.Next(2) == 0;
            var candidate = (int)Math.Round(actualPrice * (1 + (pushHigher ? percent : -percent)));
            if (candidate <= 0)
            {
                candidate = Math.Max(1000, actualPrice - 50_000);
            }

            if (candidate == actualPrice)
            {
                candidate += pushHigher ? (int)Math.Round(actualPrice * 0.05) : -(int)Math.Round(actualPrice * 0.05);
            }

            return Math.Max(1000, candidate);
        }

        private void AnimateProduct()
        {
            try
            {
                if (FindResource("RevealStoryboard") is Storyboard storyboard)
                {
                    var sb = storyboard.Clone();
                    foreach (var anim in sb.Children)
                    {
                        Storyboard.SetTarget(anim, ProductImage);
                    }
                    SoundManager.Reveal();
                    sb.Begin();
                }
            }
            catch
            {
                // ignore animation errors
            }
        }
    }
}
